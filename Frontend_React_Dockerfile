# -------- STAGE 1: Builder --------
FROM node:20-alpine AS builder

WORKDIR /app

# Use non-root user for build if desired (optional)
RUN addgroup -S app && adduser -S app -G app
USER app

# Install dependencies first (cacheable layer)
COPY --chown=app:app package*.json ./
RUN npm ci --omit=dev

# Copy source files
COPY --chown=app:app . .

# Build the app
RUN npm run build

# -------- STAGE 2: Runner (Static server) --------
FROM nginx:1.25-alpine AS runner

# Remove default nginx config and use secure minimal one
RUN rm /etc/nginx/conf.d/default.conf
COPY nginx.conf /etc/nginx/nginx.conf

# Copy built app from builder stage
COPY --from=builder /app/dist /usr/share/nginx/html

# Run nginx as non-root
RUN addgroup --system app && adduser --system --ingroup app app && \
    chown -R app:app /usr/share/nginx/html
USER app

# Expose port
EXPOSE 80

# Healthcheck (basic, adjust as needed)
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost || exit 1

CMD ["nginx", "-g", "daemon off;"]




###################################################################################

nginx.conf

##################################################################################

events {}
http {
  include       mime.types;
  default_type  application/octet-stream;
  sendfile        on;
  keepalive_timeout  65;

  server {
    listen 80;
    server_name localhost;

    location / {
      root   /usr/share/nginx/html;
      index  index.html index.htm;
      try_files $uri /index.html;
    }

    location ~* \.(?:manifest|appcache|html?|xml|json)$ {
      expires -1;
    }

    location ~* \.(?:css|js|gif|jpe?g|png|woff2?|eot|ttf|svg)$ {
      expires 1y;
      access_log off;
      add_header Cache-Control "public";
    }

    error_page 404 /index.html;
  }
}

